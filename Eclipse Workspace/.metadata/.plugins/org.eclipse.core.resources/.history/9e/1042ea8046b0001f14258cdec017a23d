package entities;

import static utilz.constants.EnemyConstants.*;
import static utilz.helpMethods.*;
import static utilz.constants.Directions.*;

import main.gameClass;

public abstract class enemy extends entity {

	private int aniIndex, enemyState, enemyType;
	private int aniTick, aniSpeed = 20;
	private boolean firstUpdate = true;
	private boolean inAir = false;
	private float fallSpeed;
	private float gravity = 0.04f * gameClass.SCALE;
	private float walkSpeed = 1.0f * gameClass.SCALE;
	private int walkDir = LEFT;
			
	
	public enemy(float x, float y, int width, int height, int enemyType) {
		super(x, y, width, height);
		this.enemyType = enemyType;
		initHitbox(x, y, width, height);
	
	}

	private void updateAnimationTick() {
		aniTick++;
		if(aniTick >= aniSpeed) {
			aniTick = 0;
			aniIndex++;
			if(aniIndex >= GetSpriteAmount(enemyType, enemyState)) {
				aniIndex = 0;
			}
		}
	}
	
	public void update(int[][] lvlData) {
		updateMove(lvlData);
		updateAnimationTick();
		
	}
	
	private void updateMove(int[][] lvlData) {
		if(firstUpdate) {
			if(!IsEntityOnFloor(hitbox, lvlData))
				inAir = true;
			firstUpdate = false;
		}
		if(inAir) {
			if(CanMoveHere(hitbox.x, hitbox.y + fallSpeed, hitbox.width, hitbox.height, lvlData)) {
				hitbox.y += fallSpeed;
				fallSpeed += gravity;
			}else {
				inAir = false;
				hitbox.y = GetEntityYPosUnderRoofOrAboveFloor(hitbox, fallSpeed);
			}
		} else {
			switch(enemyState) {
			case IDLE:
				enemyState = WALKING;
				break;
			case WALKING:
				float xSpeed = 0;
				
				if(walkDir == LEFT)
					xSpeed = -walkSpeed;
				else
					xSpeed = walkSpeed;
				
				if(CanMoveHere(hitbox.x + xSpeed, hitbox.y, hitbox.width, hitbox.height, lvlData))
					if(IsFloor(hitbox, xSpeed, lvlData)) {
						hitbox.x += xSpeed;
						return;
					}
			}
		}
		
	}
	
	public int getAniIndex() {
		return aniIndex;
	}
	public int getEnemyState() {
		return enemyState;
	}
	
	
	
}
