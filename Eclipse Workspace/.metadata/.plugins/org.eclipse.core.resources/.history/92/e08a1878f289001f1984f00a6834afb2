package utilz;

import java.awt.geom.Rectangle2D;

import main.gameClass;
import utilz.constants.Directions;

public class helpMethods {
	
	public static boolean CanMoveHere(float x, float y, float width, float height, int[][] lvlData) {
		

			for(int yStep = 0; yStep < ((int) (height)) / 2; yStep += gameClass.SCALE * gameClass.PLAYER_TO_TILE_RATIO) {
				if(IsSolid(x, y + yStep, lvlData)) {
					return false;
				}
				if(IsSolid(x, y + height - yStep, lvlData)) {
					return false;
				}
			}

			for(int xStep = 0; xStep < ((int) (width)) / 2; xStep += gameClass.SCALE * gameClass.PLAYER_TO_TILE_RATIO) {
				if(IsSolid(x + xStep, y, lvlData)) {
					return false;
				}
				if(IsSolid(x + width - xStep, y, lvlData)) {
					return false;
				}
			}

			for(int yStep = 0; yStep < ((int) (height)) / 2; yStep += gameClass.SCALE * gameClass.PLAYER_TO_TILE_RATIO) {
				if(IsSolid(x + width, y + yStep, lvlData)) {
					return false;
				}
				if(IsSolid(x + width, y + height - yStep, lvlData)) {
					return false;
				}
			}

			for(int xStep = 0; xStep < ((int) (width)) / 2; xStep += gameClass.SCALE * gameClass.PLAYER_TO_TILE_RATIO) {
				if(IsSolid(x + xStep, y + height, lvlData)) {
					return false;
				}
				if(IsSolid(x + width - xStep, y + height, lvlData)) {
					return false;
				}
			}

		
		
		return true;
	}
	
		
	private static boolean IsSolid(float x, float y, int[][] lvlData) {
		
		if(x < 0 || x >= gameClass.GAME_WIDTH) {
			
			return true;
			
		}
		if(y < 0 || y >= gameClass.GAME_HEIGHT) {
			
			return true;
			
		}
		float xIndex = x / gameClass.TILES_SIZE;
		float yIndex = y / gameClass.TILES_SIZE;
		
		int value = lvlData[(int) yIndex][(int) xIndex];
		
		if(value >= 48 || value < 0 || value != 11) {
			return true;
		}
			else {
				return false;	
			
		}
		
	}
	
	
	public static float GetEntityXPosNextToWall(Rectangle2D.Float hitbox, float xSpeed) {
		int currentTile = (int)(hitbox.x / gameClass.TILES_SIZE);
		
		if(xSpeed > 0) {
			//right
			int tileXPos = currentTile * gameClass.TILES_SIZE;
			int xOffset = (int)(gameClass.TILES_SIZE - hitbox.width);
			
			return tileXPos + xOffset - 1;
			
		}else{
			//left
			return currentTile * gameClass.TILES_SIZE;
			
		}
		
	}
	
	
	
}
