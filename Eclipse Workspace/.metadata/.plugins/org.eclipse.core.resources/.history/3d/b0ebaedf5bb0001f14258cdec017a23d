package entities;

import static utilz.constants.Directions.LEFT;
import static utilz.constants.EnemyConstants.*;
import static utilz.helpMethods.CanMoveHere;
import static utilz.helpMethods.GetEntityYPosUnderRoofOrAboveFloor;
import static utilz.helpMethods.IsEntityOnFloor;
import static utilz.helpMethods.IsFloor;

import main.gameClass;

public class slime extends enemy {

	public slime(float x, float y) {
		super(x, y, SLIME_WIDTH, SLIME_HEIGHT, SLIME);
		initHitbox(x, y, (int) (21 * gameClass.SCALE * SLIME_SCALE), (int) (17 * gameClass.SCALE * SLIME_SCALE));
		
	}
	
	public void update(int[][] lvlData) {
		updateMove(lvlData);
		updateAnimationTick();
		
	}

	private void updateMove(int[][] lvlData) {
		if(firstUpdate) {
			if(!IsEntityOnFloor(hitbox, lvlData))
				inAir = true;
			firstUpdate = false;
		}
		if(inAir) {
			if(CanMoveHere(hitbox.x, hitbox.y + fallSpeed, hitbox.width, hitbox.height, lvlData)) {
				hitbox.y += fallSpeed;
				fallSpeed += gravity;
			}else {
				inAir = false;
				hitbox.y = GetEntityYPosUnderRoofOrAboveFloor(hitbox, fallSpeed);
			}
		} else {
			switch(enemyState) {
			case IDLE:
				enemyState = WALKING;
				break;
			case WALKING:
				float xSpeed = 0;
				
				if(walkDir == LEFT)
					xSpeed = -walkSpeed;
				else
					xSpeed = walkSpeed;
				
				if(CanMoveHere(hitbox.x + xSpeed, hitbox.y, hitbox.width, hitbox.height, lvlData))
					if(IsFloor(hitbox, xSpeed, lvlData)) {
						hitbox.x += xSpeed;
						return;
					}
				
				changeWalkDir();
				
				break;
				
			}
		}
		
	}
	
}
