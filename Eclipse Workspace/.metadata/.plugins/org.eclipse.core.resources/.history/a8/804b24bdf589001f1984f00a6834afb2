package entities;

import static utilz.constants.playerConstants.*;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;

import javax.imageio.ImageIO;

import main.gameClass;
import utilz.constants.Directions;
import utilz.loadSave;
import static utilz.helpMethods.*;

public class playerClass extends entity {
	private BufferedImage[][] animations;
	private int aniTick, aniIndex, aniSpeed = 20;
	private int playerAction = IDLE;
	private boolean moving = false/*, attacking = false*/;
	private boolean left, up, right, down, jump;
	private float playerSpeed = 1.0f;
	private int[][] lvlData;
	private float xDrawOffset = 23 * gameClass.PLAYER_TO_TILE_RATIO * gameClass.SCALE;
	private float yDrawOffset = 18 * gameClass.PLAYER_TO_TILE_RATIO * gameClass.SCALE;
	private int dir;
	
	//jumping and.or gravity
	private float airSpeed = 0f;
	private float gravity = 0.04f * gameClass.SCALE;
	private float jumpSpeed = -2.25f * gameClass.SCALE;
	private float fallSpeedAfterCollision = 0.5f * gameClass.SCALE;
	private boolean inAir = false;

	public playerClass(float x, float y, int width, int height) {
		super(x, y, width, height);
		loadAnimations();
		initHitbox(x, y, 16 * gameClass.PLAYER_TO_TILE_RATIO * gameClass.SCALE, 39 * gameClass.PLAYER_TO_TILE_RATIO * gameClass.SCALE);
	}

	public void update() {
		updatePos();
		updateAnimationTick();
		setAnimation();
	}

	public void render(Graphics g) {
		g.drawImage(animations[playerAction][aniIndex], (int) (hitbox.x - xDrawOffset), (int) (hitbox.y - yDrawOffset), width, height, null);
		drawHitbox(g);
	}

	private void updateAnimationTick() {
		aniTick++;
		if (aniTick >= aniSpeed) {
			aniTick = 0;
			aniIndex++;
			if (aniIndex >= GetSpriteAmount(playerAction)) {
				aniIndex = 0;
				//attacking = false;
			}

		}

	}

	private void setAnimation() {
		int startAni = playerAction;

		if (moving)
			playerAction = RUNNING;
		else
			playerAction = IDLE;

		/*if (attacking)
			playerAction = ATTACK_1;*/

		if (startAni != playerAction)
			resetAniTick();
	}

	private void resetAniTick() {
		aniTick = 0;
		aniIndex = 0;
	}

	private void updatePos() {
		moving = false;
		
		if(jump) {
			jump();
		}
		
		if(!left && !right && !inAir) {
			return;
		}
		
		float xSpeed = 0;
		
		if (left) {
			xSpeed -= playerSpeed;
		}
		if (right) {
			xSpeed += playerSpeed;
		}
		
		if(inAir) {
			if(CanMoveHere(hitbox.x, hitbox.y + airSpeed, hitbox.width, hitbox.height, lvlData)) {
				hitbox.y += airSpeed;
				airSpeed += gravity;
				updateXPos(xSpeed);
			/*}else {
				hitbox.y = GetEntityYPosUnderRoofOrAboveFloor(hitbox, airSpeed);
				if(airSpeed > 0) {
					resetInAir();
				}else {
					airSpeed = fallSpeedAfterCollision;
				}
				updateXPos(xSpeed);*/
			}
			
		}else {
			updateXPos(xSpeed);
			
		}
		
		moving = true;
		

		/*if(CanMoveHere(hitbox.x + xSpeed, hitbox.y, hitbox.width, hitbox.height, lvlData)) {
			hitbox.x += xSpeed;
			moving = true;
		}*/
		
		/*if (up && !down) {
			ySpeed = -playerSpeed;
			dir = Directions.UP;
			
		} else if (down && !up) {
			ySpeed = playerSpeed;
			dir = Directions.DOWN;
		}

		if(CanMoveHere(hitbox.x, hitbox.y + ySpeed, hitbox.width, hitbox.height, lvlData)) {
			hitbox.y += ySpeed;
			moving = true;
		}*/
		

	}

	private void jump() {
		if(inAir) {
			return;
		}
		inAir = true;
		airSpeed = jumpSpeed;
		
	}

	private void resetInAir() {
		inAir = false;
		airSpeed = 0;
	}

	private void updateXPos(float xSpeed) {
		if(CanMoveHere(hitbox.x + xSpeed, hitbox.y, hitbox.width, hitbox.height, lvlData)) {
			hitbox.x += xSpeed;
		}else {
			hitbox.x = GetEntityXPosNextToWall(hitbox, xSpeed);
			
		}
	}

	private void loadAnimations() {
		BufferedImage img = loadSave.GetSpriteAtlas(loadSave.PLAYER_ATLAS);

			animations = new BufferedImage[2][12];
			for (int j = 0; j < animations.length; j++)
				for (int i = 0; i < animations[j].length; i++)
					animations[j][i] = img.getSubimage(i * 64, j * 64, 64, 64);


	}

	public void loadLvlData(int[][] lvlData) {
		this.lvlData = lvlData;
		
	}
	
	
	public void resetDirBooleans() {
		left = false;
		right = false;
		up = false;
		down = false;
	}

	/*public void setAttacking(boolean attacking) {
		this.attacking = attacking;
	}*/

	public boolean isLeft() {
		return left;
	}

	public void setLeft(boolean left) {
		this.left = left;
	}

	public boolean isUp() {
		return up;
	}

	public void setUp(boolean up) {
		this.up = up;
	}

	public boolean isRight() {
		return right;
	}

	public void setRight(boolean right) {
		this.right = right;
	}

	public boolean isDown() {
		return down;
	}

	public void setDown(boolean down) {
		this.down = down;
	}
	
	public void setJump(boolean jump) {
		this.jump = jump;
		
	}

}